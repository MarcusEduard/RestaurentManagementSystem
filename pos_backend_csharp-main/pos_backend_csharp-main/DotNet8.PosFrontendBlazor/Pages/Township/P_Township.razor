@page "/township"
@using DotNet8.PosFrontendBlazor.Models.State
@using Newtonsoft.Json

<MudText Typo="Typo.h6">
    <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Create" OnClick="@(()=>Popup("New Township"))"></MudIconButton>
    Township
</MudText>

@if (ResponseModel is not null)
{
int count = 0;
    <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>No.</th>
                <th>State Code</th>
                <th>Township Code</th>
                <th>Township Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseModel.Data.Township)
        {
            <tr>
                    <td>@(++count + ((pageNo - 1) * pageSize))</td>
                    <td>@item.StateCode</td>
                    <td>@item.TownshipCode</td>
                    <td>@item.TownshipName</td>
                    <td>
                        <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>Popup("Edit Township",item.TownshipCode))">Edit</MudButton>
                        <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(()=>Delete(item.TownshipId,item.TownshipName))">Delete</MudButton>
                    </td>
                </tr>
        }
        </tbody>
    </MudSimpleTable>

    <MudPagination SelectedChanged="PageChanged" Count="@ResponseModel.PageSetting.PageCount" Class="pa-4" />
}

@code {
private TownshipListResponseModel? ResponseModel;
private int pageNo = 1;
private int pageSize = 10;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await InjectService.EnableLoading();
        await List();
        StateHasChanged();
        await InjectService.DisableLoading();
    }
}

private async Task List()
{
    ResponseModel = await HttpClientService.ExecuteAsync<TownshipListResponseModel>
    (
        Endpoints.Township.WithPagination(pageNo, pageSize),
        EnumHttpMethod.Get
    );
}

private async Task PageChanged(int i)
{
    pageNo = i;
    await List();
}

private async Task Popup(string title, string townshipCode = null)
{
    DialogResult result;
    if (townshipCode is null)
    {
        result = await InjectService.ShowModalBoxAsync<P_TownshipDialog>(title);
    }
    else
    {
        #region Get Township By Code

        var tspModel = await HttpClientService.ExecuteAsync<TownshipResponseModel>(Endpoints.Township + "/" + townshipCode, EnumHttpMethod.Get);
        if (tspModel != null && tspModel.Data != null)
        {
            var stateModel = await HttpClientService.ExecuteAsync<StateResponeModel>($"{Endpoints.State}/{tspModel.Data.Township.StateCode}", EnumHttpMethod.Get);
            if (stateModel is not null && stateModel.Data is not null && stateModel.Data.State is not null)
                tspModel.Data.Township.StateName = stateModel.Data.State.StateName;
        }

        #endregion

        #region Add Parameters

        var parameters = new DialogParameters<P_TownshipDialog>();
        parameters.Add(x => x.model, tspModel == null ? new TownshipModel() : tspModel.Data.Township);

        #endregion

        result = await InjectService.ShowModalBoxAsync<P_TownshipDialog>(title, parameters);
    }

    if (!result.Canceled)
    {
        await List();
        StateHasChanged();
    }
}

private async Task Delete(int townshipId, string townshipName)
{
    var parameters = new DialogParameters<P_TownshipDeleteDialog>();
    parameters.Add(x => x.contentText, $"Are you sure you want to delete {townshipName} township?");
    parameters.Add(x => x.buttonText, "Delete");
    parameters.Add(x => x.color, Color.Error);
    parameters.Add(x => x.townshipId, townshipId);

    var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

    var result = await InjectService.ShowModalBoxAsync<P_TownshipDeleteDialog>("Delete", parameters);
    if (!result.Canceled)
        await List();
}
}
