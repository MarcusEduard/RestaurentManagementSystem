@page "/product-category"
@using DotNet8.PosFrontendBlazor.Server.Models.Product
@using DotNet8.PosFrontendBlazor.Server.Models.ProductCategory
@using DotNet8.PosFrontendBlazor.Server.Services

<MudText Typo="Typo.h6">
    <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Create" OnClick="@(()=>Popup("New ProductCategory"))"></MudIconButton>
    Product Category
</MudText>


@if (ResponseModel is not null)
{
    int count = 0;
    <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>No.</th>
                <th>Product Category Code</th>
                <th>Product Category Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseModel.Data.ProductCategory)
            {
                <tr>
                    <td>@(++count + ((pageNo - 1) * pageSize))</td>
                    <td>@item.ProductCategoryCode</td>
                    <td>@item.ProductCategoryName</td>
                    <td>
                        <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>EditPopUp(item.ProductCategoryId, item.ProductCategoryCode, item.ProductCategoryName))">Edit</MudButton>
                        <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(()=>Delete(item.ProductCategoryId))">Delete</MudButton>

                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
    <MudPagination SelectedChanged="PageChanged" Count="@ResponseModel.PageSetting.PageCount" Class="pa-4" />
}


@code {
    private ProductCategoryListResponseModel? ResponseModel;
    private int pageNo = 1;
    private int pageSize = 10;

    [Parameter] public ProductRequestModel reqModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // var response = await HttpClientService.ExecuteAsync<ProductCategoryResponseModel>(
        //     Endpoints.ProductCategory,
        //     EnumHttpMethod.Post,
        //     new ProductCategoryRequestModel
        //         {
        //             ProductCategoryCode = "001",
        //             ProductCategoryName = "Testing"
        //         }
        // );
        await List();
    }

    private async Task List()
    {
        ResponseModel = await HttpClientService.ExecuteAsync<ProductCategoryListResponseModel>
        (
            Endpoints.ProductCategory.WithPagination(pageNo, pageSize),
            EnumHttpMethod.Get
        );
    }

    private async Task PageChanged(int i)
    {
        pageNo = i;
        await List();
    }

    // private async Task Popup()
    // {
    //     var dialog = await DialogService.ShowAsync<P_ProductCategoryDialog>("New Product Category");
    //     var result = await dialog.Result;

    //     if (!result.Canceled)
    //     {
    //         await List();
    //     }
    // }
    private async Task Popup(string title)
    {   var result = await InjectService.ShowModalBoxAsync<P_ProductCategoryDialog>(title);
        if (!result.Canceled)
        {
            await List();
        }
    }
    private async Task EditPopUp(int id, string? ProductCategoryCode, string? ProductCategoryName)
    {
        ProductCategoryRequestModel? model = new()
            {
                ProductCategoryId = id,
                ProductCategoryCode = ProductCategoryCode,
                ProductCategoryName = ProductCategoryName               
            };
        DialogParameters parameters = new DialogParameters<P_ProductCategoryEditDialog>()
            {
                {x => x.reqModel, model }
            };
        DialogResult dialogResult = await InjectService.ShowModalBoxAsync<P_ProductCategoryEditDialog>("Edit Product Category", parameters);

        if (!dialogResult.Canceled)
            await List();
    }
    private async Task Delete(int id)
    {
        var parameters = new DialogParameters<P_ProductCategoryDeleteDialog>();
        parameters.Add(x => x.contentText, "Are you sure you want to delete?");
        parameters.Add(x => x.productCategoryId, id);

        var options = new MudBlazor.DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall
            };

        var result = await InjectService.ShowModalBoxAsync<P_ProductCategoryDeleteDialog>("Delete", parameters);
        if (!result.Canceled)
        {
            await List();
        }
    }    
}
