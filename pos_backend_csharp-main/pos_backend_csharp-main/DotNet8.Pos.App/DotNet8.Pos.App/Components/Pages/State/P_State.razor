@using DotNet8.Pos.App.Models.State
@using DotNet8.Pos.App.Services
@using Newtonsoft.Json
@page "/state"
<MudText Typo="Typo.h6">
    <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Create" OnClick="@(()=>Popup("New State"))"></MudIconButton>
    State
</MudText>
@if (ResponseModel is not null)
{
int count = 0;
    <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>No.</th>
                <th>State Code</th>
                <th>State Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseModel.Data.State)
        {
            <tr>
                    <td>@(++count + ((pageNo - 1) * pageSize))</td>
                    <td>@item.StateCode</td>
                    <td>@item.StateName</td>
                    <td>
                        <MudButton OnClick="@(()=>Popup("Edit State",item.StateCode))" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                        <MudButton OnClick="@(()=>Delete(item.StateId,item.StateName))" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                    </td>
                </tr>
        }
        </tbody>
    </MudSimpleTable>
    <MudPagination SelectedChanged="PageChanged" Count="@ResponseModel.PageSetting.PageCount" Class="pa-4" />
}

@code {
private StateListResponseModel? ResponseModel;
private int pageNo = 1;
private int pageSize = 10;


protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await InjectService.EnableLoading();
        await List();
        StateHasChanged();
        await InjectService.DisableLoading();
    }
}


private async Task List()
{
   // ResponseModel = await HttpClientService.ExecuteAsync<StateListResponseModel>(Endpoints.State, EnumHttpMethod.Get);
    ResponseModel = await HttpClientService.ExecuteAsync<StateListResponseModel>
    (
        Endpoints.State.WithPagination(pageNo, pageSize),
        EnumHttpMethod.Get
    );
}

private async Task PageChanged(int i)
{
    pageNo = i;
    await List();
}

private async Task Popup(string title, string stateCode = null)
{
    DialogResult result;
    if (stateCode is null)
    {
        result = await InjectService.ShowModalBoxAsync<P_StateDialog>(title);
    }
    else
    {
        var StaModel = await HttpClientService.ExecuteAsync<StateResponeModel>(Endpoints.State + "/" + stateCode, EnumHttpMethod.Get);
        var parameters = new DialogParameters<P_StateDialog>();
        parameters.Add(x => x.model, StaModel == null ? new StateModel() : StaModel.Data.State);
        result = await InjectService.ShowModalBoxAsync<P_StateDialog>(title, parameters);
    }

    if (!result.Canceled)
    {
        await List();
        StateHasChanged();
    }
}

private async Task Delete(int stateId,string stateName)
{
    var parameters = new DialogParameters<P_StateDeleteDialog>();
    parameters.Add(x => x.contentText, $"Are you sure want to delete {stateName} state?");
    parameters.Add(x => x.buttonText, "Delete");
    parameters.Add(x => x.color, Color.Error);
    parameters.Add(x => x.stateId, stateId);

    var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
    var result = await InjectService.ShowModalBoxAsync<P_StateDeleteDialog>("Delete", parameters);
    if (!result.Cancelled)
        await List();
}

}